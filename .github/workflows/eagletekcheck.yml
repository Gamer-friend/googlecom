name: Eagletek

on:
  create:
    tags:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read

env:
  DEVELOPER: 1

concurrency:
  group: ${{ github.sha }}

jobs:
  install-torch:
    name: install torch
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  lint:
    name: Connect to Linux Server
    runs-on: ubuntu-latest
    environment: 'Development'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.arch }} 
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4

  ci-config:
    name: Configure linux arch 
    if: vars.CI_BRANCHES == '' || contains(vars.CI_BRANCHES, github.ref_name)
    runs-on: ubuntu-latest
    outputs:
      enabled: ${{ steps.check-ref.outputs.enabled }}${{ steps.skip-if-redundant.outputs.enabled }}
      skip_concurrent: ${{ steps.check-ref.outputs.skip_concurrent }}
    steps:
      - name: try to clone ci-config branch
        run: |
          git -c protocol.version=2 clone \
            --no-tags \
            --single-branch \
            -b ci-config \
            --depth 1 \
            --no-checkout \
            --filter=blob:none \
            https://github.com/${{ github.repository }} \
            config-repo &&
          cd config-repo &&
          git checkout HEAD -- ci/config || true
      - id: check-ref
        name: check whether CI is enabled for ref
        run: |
          enabled=yes
          if test -x config-repo/ci/config/allow-ref
          then
            echo "::warning::ci/config/allow-ref is deprecated; use CI_BRANCHES instead"
            if ! config-repo/ci/config/allow-ref '${{ github.ref }}'
            then
              enabled=no
            fi
          fi
          skip_concurrent=yes
          if test -x config-repo/ci/config/skip-concurrent &&
             ! config-repo/ci/config/skip-concurrent '${{ github.ref }}'
          then
            skip_concurrent=no
          fi
          echo "enabled=$enabled" >>$GITHUB_OUTPUT
          echo "skip_concurrent=$skip_concurrent" >>$GITHUB_OUTPUT
      - name: skip if the commit or tree was already tested
        id: skip-if-redundant
        uses: actions/github-script@v7
        if: steps.check-ref.outputs.enabled == 'yes'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: run } = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
              });
              const workflow_id = run.workflow_id;
              const head_sha = run.head_sha;
              const tree_id = run.head_commit.tree_id;
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 500,
                status: 'success',
                workflow_id,
              });
              for (const run of runs.workflow_runs) {
                if (head_sha === run.head_sha) {
                  core.warning(`Successful run for the commit ${head_sha}: ${run.html_url}`);
                  core.setOutput('enabled', ' but skip');
                  break;
                }
                if (run.head_commit && tree_id === run.head_commit.tree_id) {
                  core.warning(`Successful run for the tree ${tree_id}: ${run.html_url}`);
                  core.setOutput('enabled', ' but skip');
                  break;
                }
              }
            } catch (e) {
              core.warning(e);
            }
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Create Output Directory
        run: mkdir -p out

  emscripten:
    name: Checkout -- Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          
  nvminstall:
    name: Nvm install / verify
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install NVM
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install 22
          
      - name: Verify Node.js version
        run: |
          node -v
          npm -v
          
      - name: Check NVM terminal
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  sanitize:
    name: Sanitize 1
    runs-on: ubuntu-24.04
    env:
      USE_NINJA: "1"
      CC: "clang"
      WASM2C_CFLAGS: "-march=x86-64-v2"
    strategy:
      matrix:
        sanitizer: [asan, ubsan, fuzz]
        type: [debug, release]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4
        with:
          submodules: true

  build-wasm2c-memchecked:
    name: Sanitize 1/2 (merge)
    runs-on: ubuntu-latest
    env:
      USE_NINJA: "1"
      CC: "clang"
      WASM2C_CFLAGS: "-march=x86-64-v2 -fsanitize=address -DWASM_RT_USE_MMAP=0"
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: sudo apt-get install ninja-build
      - name: Workaround for ASLR+ASAN Compatibility
        run: sudo sysctl -w vm.mmap_rnd_bits=28

  linux-build:
    name: linux Arch build
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    runs-on: ubuntu-latest
    concurrency:
      group: linux-build-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    steps:
      - uses: actions/checkout@v4
      - name: upload tracked files and build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tracked-files
          path: artifacts/tracked.tar.gz

  test:
    name: Run Tests
    needs: [windows-build, linux-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'

## Windows-Stats was automatically generated by AZURE_CLI. Please note that Azure_CLI can make mistakes.
##--<WORKFLOW-WINDOW>--##
  Window-Stats:
    name: Window-Echo
    runs-on: windows-latest
    needs: [ci-config]
    steps:
      - uses: actions/checkout@v4
    
      - name: Warn-Windows
        run: |
         echo "Windows application [200 jobs] May not operate correctly when too many jobs are running. Please be sure to check your Azure dashboard for more imformation. Azure has detected a total of [258] Workflow jobs. The predicted time for all [200] jobs to finish are: 12 Minutes. Adjust Levels as nesseesary."
         echo "Windows have detected low storage space on your cloud. [129.3 GB/150 GB] Please upgrade your cloud. More imformation about "Cloud Storage" is in Azure portal."
         echo "Windows MAX JOBS REACHED: [12932/13000] Upgrade by bying more storage or transfering/deleting old data."
         echo "Here are your Azure stats:"
         echo "LINUX: 100% up"
         echo "UBUNTU: 98.3% up"
         echo "WINDOWS: 82% up"
         echo "GITHUB CLI - - - - - - - - - - - - - - - - - - - - - - - CONNECTED"
         echo "GITHUB WEBHOOK - - - - - - - - - - - - - - - - - - - - - CONNECTED"
         echo "GITHUB FSA - - - - - - - - - - - - - - - - - - - - - - - NOT SET UP" 
##--<WORKFLOW-WINDOW>--##
  regular:
    name: ${{ matrix.vector.jobname }} (${{ matrix.vector.pool }})
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    concurrency:
      group: ${{ matrix.vector.jobname }}-${{ matrix.vector.pool }}-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    strategy:
      fail-fast: false
      matrix:
        vector:
          - jobname: linux-sha256
            cc: clang
            pool: ubuntu-latest
          - jobname: linux-reftable
            cc: clang
            pool: ubuntu-latest
          - jobname: linux-gcc
            cc: gcc
            cc_package: gcc-8
            pool: ubuntu-20.04
          - jobname: linux-TEST-vars
            cc: gcc
            cc_package: gcc-8
            pool: ubuntu-20.04
          - jobname: osx-clang
            cc: clang
            pool: macos-13
          - jobname: osx-reftable
            cc: clang
            pool: macos-13
          - jobname: osx-gcc
            cc: gcc-13
            pool: macos-13
          - jobname: linux-gcc-default
            cc: gcc
            pool: ubuntu-latest
          - jobname: linux-leaks
            cc: gcc
            pool: ubuntu-latest
          - jobname: linux-reftable-leaks
            cc: gcc
            pool: ubuntu-latest
          - jobname: linux-asan-ubsan
            cc: clang
            pool: ubuntu-latest
    env:
      CC: ${{ matrix.vector.cc }}
      CC_PACKAGE: ${{ matrix.vector.cc_package }}
      jobname: ${{ matrix.vector.jobname }}
      distro: ${{ matrix.vector.pool }}
    runs-on: ${{ matrix.vector.pool }}
    steps:
      - uses: actions/checkout@v4
      - name: print test failures
        if: failure() && env.FAILED_TEST_ARTIFACTS != ''
        run: ci/print-test-failures.sh
      - name: Upload failed tests' directories
        if: failure() && env.FAILED_TEST_ARTIFACTS != ''
        uses: actions/upload-artifact@v4
        with:
          name: failed-tests-${{ matrix.vector.jobname }}
          path: ${{ env.FAILED_TEST_ARTIFACTS }}

  fuzz-smoke-test:
    name: fuzz smoke test
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      CC: clang
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

  dockerized:
    name: ${{ matrix.vector.jobname }} (${{ matrix.vector.image }})
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    concurrency:
      group: dockerized-${{ matrix.vector.jobname }}-${{ matrix.vector.image }}-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    strategy:
      fail-fast: false
      matrix:
        vector:
          - jobname: linux-musl
            image: alpine
            distro: alpine-latest
          - jobname: linux32
            image: i386/ubuntu:focal
            distro: ubuntu32-20.04
          - jobname: pedantic
            image: fedora
            distro: fedora-latest
    env:
      jobname: ${{ matrix.vector.jobname }}
      distro: ${{ matrix.vector.distro }}
    runs-on: ubuntu-latest
    container: ${{ matrix.vector.image }}
    steps:
      - name: prepare libc6 for actions
        if: matrix.vector.jobname == 'linux32'
        run: apt -q update && apt -q -y install libc6-amd64 lib64stdc++6
      - uses: actions/checkout@v4
      - name: print test failures
        if: failure() && env.FAILED_TEST_ARTIFACTS != ''
        run: ci/print-test-failures.sh
      - name: Upload failed tests' directories
        if: failure() && env.FAILED_TEST_ARTIFACTS != ''
        uses: actions/upload-artifact@v4
        with:
          name: failed-tests-${{ matrix.vector.jobname }}
          path: ${{ env.FAILED_TEST_ARTIFACTS }}

  static-analysis:
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: StaticAnalysis
    runs-on: ubuntu-22.04
    concurrency:
      group: static-analysis-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    steps:
      - uses: actions/checkout@v4

  sparse:
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: sparse
    runs-on: ubuntu-20.04
    concurrency:
      group: sparse-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    steps:
      - name: Download a current `sparse` package
        uses: git-for-windows/get-azure-pipelines-artifact@v0
        with:
          repository: git/git
          definitionId: 10
          artifact: sparse-20.04
      - name: Install the current `sparse` package
        run: sudo dpkg -i sparse-20.04/sparse_*.deb
      - uses: actions/checkout@v4

  documentation:
    name: documentation
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    concurrency:
      group: documentation-${{ github.ref }}
      cancel-in-progress: ${{ needs.ci-config.outputs.skip_concurrent == 'yes' }}
    env:
      jobname: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo oh
  ci-build:
    name: Ci-build
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install npm module(s) ${{ matrix.npm-i }}
        run: npm install --save-dev ${{ matrix.npm-i }} 
        if: matrix.npm-i != ''

      - name: npm funding details
        run: npm fund

      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint

      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./${{ matrix.name }}"
            mkdir ./coverage
            mv "./${{ matrix.name }}" "./coverage/${{ matrix.name }}"
          fi
  ci-build-nodejs-0-8:
    name: Node.js 0.8
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js 0.8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./Node.js 0.8"
            mkdir ./coverage
            mv "./Node.js 0.8" "./coverage/Node.js 0.8"
          fi
  ci-build-nodejs-0-10:
    name: Node.js 0.10
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js 0.10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./Node.js 0.10"
            mkdir ./coverage
            mv "./Node.js 0.10" "./coverage/Node.js 0.10"
          fi
  ci-build-nodejs-0-12:
    name: Node.js-- 0.12
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js 0.12
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./Node.js 0.12"
            mkdir ./coverage
            mv "./Node.js 0.12" "./coverage/Node.js 0.12"
          fi
  ci-build-iojs-1-x:
    name: io.js 1.x
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-io.js 1.x
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./io.js 1.x"
            mkdir ./coverage
            mv "./io.js 1.x" "./coverage/io.js 1.x"
          fi
  ci-build-iojs-2-x:
    name: io.js 2.x
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-io.js 2.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./io.js 2.x"
            mkdir ./coverage
            mv "./io.js 2.x" "./coverage/io.js 2.x"
          fi
  ci-build-iojs-3-x:
    name: io.js 3.x
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-io.js 3.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./io.js 3.x"
            mkdir ./coverage
            mv "./io.js 3.x" "./coverage/io.js 3.x"
          fi
  ci-build-nodejs-4-x:
    name: Node.js 4.x
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js 4.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./Node.js 4.x"
            mkdir ./coverage
            mv "./Node.js 4.x" "./coverage/Node.js 4.x"
          fi
  ci-build-nodejs-5-x:
    name: Node.js 5.x
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js 5.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./Node.js 5.x"
            mkdir ./coverage
            mv "./Node.js 5.x" "./coverage/Node.js 5.x"
          fi
  ci-build-nodejs-6-x:
    name: Node.js 6.x
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js 6.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./Node.js 6.x"
            mkdir ./coverage
            mv "./Node.js 6.x" "./coverage/Node.js 6.x"
          fi
  ci-build-nodejs-7-x:
    name: Node.js 7.x
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js 7.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint 
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./Node.js 7.x"
            mkdir ./coverage
            mv "./Node.js 7.x" "./coverage/Node.js 7.x"
          fi
  
  ci-build-nodejs-0--8:
    name: Node.js ---0.8
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js 0.8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./Node.js 0.8"
            mkdir ./coverage
            mv "./Node.js 0.8" "./coverage/Node.js 0.8"
          fi
  ci-build-nodejs-0--10:
    name: Node.js-- 0.10
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js 0.10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./Node.js 0.10"
            mkdir ./coverage
            mv "./Node.js 0.10" "./coverage/Node.js 0.10"
          fi
  ci-build-nodejs-0--12:
    name: Node.js 0.12
    needs: ci-config
    if: needs.ci-config.outputs.enabled == 'yes'
    env:
      jobname: Ci-Configuration build-Node.js 0.12
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: npm funding details
        run: npm fund
      - name: Lint code
        if: steps.list_env.outputs.eslint != ''
        run: npm run lint
      - name: Collect code coverage
        if: steps.list_env.outputs.nyc != ''
        run: |
          if [[ -d ./coverage ]]; then
            mv ./coverage "./Node.js 0.12"
            mkdir ./coverage
            mv "./Node.js 0.12" "./coverage/Node.js 0.12"
          fi
